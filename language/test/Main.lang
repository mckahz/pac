module Main [];

let List a =
    | Empty
    | Cons a (List a);

let head : List a -> a;
let head xs =
    when xs is
    | [] -> crash "cannot get head of empty list"
    | x::_ -> x;

let tail : List a -> List a;
let tail xs =
    when xs is
    | [] -> crash "cannot get tail of empty list"
    | _::xs -> xs;

let length : List a -> Nat;
let length = walk 0 (\_ s -> s + 1);

let empty? : List a -> Bool;
let empty? xs =
    when xs is
    | [] -> True
    | _ -> False;

let walk : acc -> (a -> acc -> acc) -> List a -> acc;
let walk init f xs =
    when xs is
    | [] -> init
    | y::ys -> walk (f y init) f ys;

let reverse : List a -> List a;
let reverse = walk [] (\x acc -> x :: acc);

let walk_backwards : acc -> (a -> acc -> acc) -> List a -> acc;
let walk_backwards init f xs = reverse (walk init f xs);

let map : (a -> b) -> List a -> List b;
let map f =
    walk_backwards [] (\x acc -> f x :: acc);

let filter : (a -> Bool) -> List a -> List a;
let filter p = walk_backwards [] (\x acc ->
        if p x then
            x :: acc
        else
            acc
    );

let sum : List Int -> Int;
let sum = walk 0 (\a b -> a + b);

let range : Nat -> Nat -> List Nat;
let range low high =
    reverse <| range_help [] low high;

let range_help : List Nat -> Nat -> Nat -> List Nat;
let range_help acc low high =
    if low > high then
        acc
    else
        range_help (low :: acc) (low + 1) high;

let main : Task { stdout: Stdout } ();
let main =
    (if 1 == 1 then range 0 100 else [7, 8, 9])
    |> List.filter Num.odd?
    |> Task.println;

