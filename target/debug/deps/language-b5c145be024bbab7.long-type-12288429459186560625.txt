Choice<(nom::Map<impl FnMut(LocatedSpan<&str>) -> std::result::Result<(LocatedSpan<&str>, (String, String)), nom::Err<nom::error::Error<LocatedSpan<&str>>>>, {closure@src/parse/expression.rs:84:18: 84:36}>, impl nom::Parser<LocatedSpan<&str>, Output = ast::Located<source::Expr_>, Error = nom::error::Error<LocatedSpan<&str>>>, for<'a> fn(LocatedSpan<&'a str>) -> std::result::Result<(LocatedSpan<&'a str>, ast::Located<source::Expr_>), nom::Err<nom::error::Error<LocatedSpan<&'a str>>>> {record_literal}, for<'a> fn(LocatedSpan<&'a str>) -> std::result::Result<(LocatedSpan<&'a str>, ast::Located<source::Expr_>), nom::Err<nom::error::Error<LocatedSpan<&'a str>>>> {list}, nom::Map<for<'a> fn(LocatedSpan<&'a str>) -> std::result::Result<(LocatedSpan<&'a str>, String), nom::Err<nom::error::Error<LocatedSpan<&'a str>>>> {string_literal}, fn(String) -> source::Expr_ {source::Expr_::String}>, nom::Map<for<'a> fn(LocatedSpan<&'a str>) -> std::result::Result<(LocatedSpan<&'a str>, u32), nom::Err<nom::error::Error<LocatedSpan<&'a str>>>> {nat}, fn(u32) -> source::Expr_ {source::Expr_::Nat}>, nom::Map<for<'a> fn(LocatedSpan<&'a str>) -> std::result::Result<(LocatedSpan<&'a str>, i32), nom::Err<nom::error::Error<LocatedSpan<&'a str>>>> {int}, fn(i32) -> source::Expr_ {source::Expr_::Int}>, nom::Map<fn(_) -> std::result::Result<(_, f32), nom::Err<_>> {nom::number::complete::float::<_, _>}, fn(f32) -> source::Expr_ {source::Expr_::Float}>, for<'a> fn(LocatedSpan<&'a str>) -> std::result::Result<(LocatedSpan<&'a str>, ast::Located<source::Expr_>), nom::Err<nom::error::Error<LocatedSpan<&'a str>>>> {identifier}, for<'a> fn(LocatedSpan<&'a str>) -> std::result::Result<(LocatedSpan<&'a str>, ast::Located<source::Expr_>), nom::Err<nom::error::Error<LocatedSpan<&'a str>>>> {parse::expression::constructor})>
Choice<(nom::Map<impl FnMut(LocatedSpan<&str>) -> std::result::Result<(LocatedSpan<&str>, (String, String)), nom::Err<nom::error::Error<LocatedSpan<&str>>>>, {closure@src/parse/expression.rs:84:18: 84:36}>, impl nom::Parser<LocatedSpan<&str>, Output = ast::Located<source::Expr_>, Error = nom::error::Error<LocatedSpan<&str>>>, for<'a> fn(LocatedSpan<&'a str>) -> std::result::Result<(LocatedSpan<&'a str>, ast::Located<source::Expr_>), nom::Err<nom::error::Error<LocatedSpan<&'a str>>>> {record_literal}, for<'a> fn(LocatedSpan<&'a str>) -> std::result::Result<(LocatedSpan<&'a str>, ast::Located<source::Expr_>), nom::Err<nom::error::Error<LocatedSpan<&'a str>>>> {list}, nom::Map<for<'a> fn(LocatedSpan<&'a str>) -> std::result::Result<(LocatedSpan<&'a str>, String), nom::Err<nom::error::Error<LocatedSpan<&'a str>>>> {string_literal}, fn(String) -> source::Expr_ {source::Expr_::String}>, nom::Map<for<'a> fn(LocatedSpan<&'a str>) -> std::result::Result<(LocatedSpan<&'a str>, u32), nom::Err<nom::error::Error<LocatedSpan<&'a str>>>> {nat}, fn(u32) -> source::Expr_ {source::Expr_::Nat}>, nom::Map<for<'a> fn(LocatedSpan<&'a str>) -> std::result::Result<(LocatedSpan<&'a str>, i32), nom::Err<nom::error::Error<LocatedSpan<&'a str>>>> {int}, fn(i32) -> source::Expr_ {source::Expr_::Int}>, nom::Map<fn(_) -> std::result::Result<(_, f32), nom::Err<_>> {nom::number::complete::float::<_, _>}, fn(f32) -> source::Expr_ {source::Expr_::Float}>, for<'a> fn(LocatedSpan<&'a str>) -> std::result::Result<(LocatedSpan<&'a str>, ast::Located<source::Expr_>), nom::Err<nom::error::Error<LocatedSpan<&'a str>>>> {identifier}, for<'a> fn(LocatedSpan<&'a str>) -> std::result::Result<(LocatedSpan<&'a str>, ast::Located<source::Expr_>), nom::Err<nom::error::Error<LocatedSpan<&'a str>>>> {parse::expression::constructor})>: nom::Parser<LocatedSpan<&str>>
