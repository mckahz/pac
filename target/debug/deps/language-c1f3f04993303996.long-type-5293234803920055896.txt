Choice<(for<'a> fn(LocatedSpan<&'a str>) -> std::result::Result<(LocatedSpan<&'a str>, source::Type), nom::Err<ast::Located<syntax::ErrorKind>>> {parse::tipe::qualified}, impl nom::Parser<LocatedSpan<&str>, Output = ast::Located<Type_>, Error = ast::Located<syntax::ErrorKind>>, for<'a> fn(LocatedSpan<&'a str>) -> std::result::Result<(LocatedSpan<&'a str>, source::Type), nom::Err<ast::Located<syntax::ErrorKind>>> {tuple_type}, for<'a> fn(LocatedSpan<&'a str>) -> std::result::Result<(LocatedSpan<&'a str>, source::Type), nom::Err<ast::Located<syntax::ErrorKind>>> {record_type}, for<'a> fn(LocatedSpan<&'a str>) -> std::result::Result<(LocatedSpan<&'a str>, source::Type), nom::Err<ast::Located<syntax::ErrorKind>>> {unit_type}, impl nom::Parser<LocatedSpan<&str>, Output = source::Type, Error = ast::Located<syntax::ErrorKind>>)>
