impl FnMut(LocatedSpan<&str>) -> std::result::Result<(LocatedSpan<&str>, _), nom::Err<GenericErrorTree<LocatedSpan<&str>, &'static str, &'static str, Box<(dyn std::error::Error + Send + Sync + 'static)>>>>
(nom::Map<for<'a> fn(LocatedSpan<&'a str>) -> std::result::Result<(LocatedSpan<&'a str>, LocatedSpan<&'a str>), nom::Err<GenericErrorTree<LocatedSpan<&'a str>, &'static str, &'static str, Box<(dyn std::error::Error + Send + Sync + 'static)>>>> {parse::type_identifier}, fn(LocatedSpan<&str>) -> source::Type<'_> {source::Type::<'_>::Identifier}, LocatedSpan<&str>>, nom::Map<for<'a> fn(LocatedSpan<&'a str>) -> std::result::Result<(LocatedSpan<&'a str>, String), nom::Err<GenericErrorTree<LocatedSpan<&'a str>, &'static str, &'static str, Box<(dyn std::error::Error + Send + Sync + 'static)>>>> {parse::value_identifier}, fn(LocatedSpan<&str>) -> source::Type<'_> {source::Type::<'_>::Identifier}, String>, for<'a> fn(&'a str) -> std::result::Result<(LocatedSpan<&'a str>, source::Type<'a>), nom::Err<GenericErrorTree<LocatedSpan<&'a str>, &'static str, &'static str, Box<(dyn std::error::Error + Send + Sync + 'static)>>>> {tuple_type}, for<'a> fn(&'a str) -> std::result::Result<(LocatedSpan<&'a str>, source::Type<'a>), nom::Err<GenericErrorTree<LocatedSpan<&'a str>, &'static str, &'static str, Box<(dyn std::error::Error + Send + Sync + 'static)>>>> {record_type}, for<'a> fn(&'a str) -> std::result::Result<(LocatedSpan<&'a str>, source::Type<'a>), nom::Err<GenericErrorTree<LocatedSpan<&'a str>, &'static str, &'static str, Box<(dyn std::error::Error + Send + Sync + 'static)>>>> {unit_type}, impl FnMut(LocatedSpan<&str>) -> std::result::Result<(LocatedSpan<&str>, _), nom::Err<GenericErrorTree<LocatedSpan<&str>, &'static str, &'static str, Box<(dyn std::error::Error + Send + Sync + 'static)>>>>)
