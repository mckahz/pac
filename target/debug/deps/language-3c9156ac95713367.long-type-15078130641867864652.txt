for<'a> fn(LocatedSpan<&'a str>) -> std::result::Result<(LocatedSpan<&'a str>, LocatedSpan<&'a str>), nom::Err<GenericErrorTree<LocatedSpan<&'a str>, &'static str, &'static str, Box<(dyn std::error::Error + Send + Sync + 'static)>>>> {parse::type_identifier}
(for<'a> fn(LocatedSpan<&'a str>) -> std::result::Result<(LocatedSpan<&'a str>, LocatedSpan<&'a str>), nom::Err<GenericErrorTree<LocatedSpan<&'a str>, &'static str, &'static str, Box<(dyn std::error::Error + Send + Sync + 'static)>>>> {parse::type_identifier}, impl nom::Parser<&str, Output = Vec<<for<'a> fn(&'a str) -> std::result::Result<(LocatedSpan<&'a str>, source::Pattern), nom::Err<GenericErrorTree<LocatedSpan<&'a str>, &'static str, &'static str, Box<(dyn std::error::Error + Send + Sync + 'static)>>>> {parse::pattern::term} as nom::Parser<&str>>::Output>, Error = <for<'a> fn(&'a str) -> std::result::Result<(LocatedSpan<&'a str>, source::Pattern), nom::Err<GenericErrorTree<LocatedSpan<&'a str>, &'static str, &'static str, Box<(dyn std::error::Error + Send + Sync + 'static)>>>> {parse::pattern::term} as nom::Parser<&str>>::Error>)
