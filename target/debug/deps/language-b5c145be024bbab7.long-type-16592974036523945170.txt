Choice<(impl nom::Parser<LocatedSpan<&str>, Output = ast::Located<source::Expr_>, Error = nom::error::Error<LocatedSpan<&str>>>, impl nom::Parser<LocatedSpan<&str>, Output = ast::Located<source::Expr_>, Error = nom::error::Error<LocatedSpan<&str>>>, for<'a> fn(LocatedSpan<&'a str>) -> std::result::Result<(LocatedSpan<&'a str>, ast::Located<source::Expr_>), nom::Err<nom::error::Error<LocatedSpan<&'a str>>>> {record_literal}, for<'a> fn(LocatedSpan<&'a str>) -> std::result::Result<(LocatedSpan<&'a str>, ast::Located<source::Expr_>), nom::Err<nom::error::Error<LocatedSpan<&'a str>>>> {list}, impl nom::Parser<LocatedSpan<&str>, Output = ast::Located<source::Expr_>, Error = nom::error::Error<LocatedSpan<&str>>>, impl nom::Parser<LocatedSpan<&str>, Output = ast::Located<source::Expr_>, Error = nom::error::Error<LocatedSpan<&str>>>, impl nom::Parser<LocatedSpan<&str>, Output = ast::Located<source::Expr_>, Error = nom::error::Error<LocatedSpan<&str>>>, nom::Map<fn(_) -> std::result::Result<(_, f32), nom::Err<_>> {nom::number::complete::float::<_, _>}, fn(f32) -> source::Expr_ {source::Expr_::Float}>, for<'a> fn(LocatedSpan<&'a str>) -> std::result::Result<(LocatedSpan<&'a str>, ast::Located<source::Expr_>), nom::Err<nom::error::Error<LocatedSpan<&'a str>>>> {identifier}, for<'a> fn(LocatedSpan<&'a str>) -> std::result::Result<(LocatedSpan<&'a str>, ast::Located<source::Expr_>), nom::Err<nom::error::Error<LocatedSpan<&'a str>>>> {parse::expression::constructor})>
