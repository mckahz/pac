GenericErrorTree<LocatedSpan<&str>, &'static str, &'static str, Box<(dyn std::error::Error + Send + Sync + 'static)>>
GenericErrorTree<LocatedSpan<&str>, &'static str, &'static str, Box<(dyn std::error::Error + Send + Sync + 'static)>>: ParseError<LocatedSpan<&str>>
impl FnMut(LocatedSpan<&str>) -> std::result::Result<(LocatedSpan<&str>, LocatedSpan<&str>), nom::Err<GenericErrorTree<LocatedSpan<&str>, &'static str, &'static str, Box<(dyn std::error::Error + Send + Sync + 'static)>>>>
impl nom::Parser<&str, Output = Vec<<for<'a> fn(&'a str) -> std::result::Result<(LocatedSpan<&'a str>, source::Pattern), nom::Err<GenericErrorTree<LocatedSpan<&'a str>, &'static str, &'static str, Box<(dyn std::error::Error + Send + Sync + 'static)>>>> {parse::pattern::pattern} as nom::Parser<&str>>::Output>, Error = <for<'a> fn(&'a str) -> std::result::Result<(LocatedSpan<&'a str>, source::Pattern), nom::Err<GenericErrorTree<LocatedSpan<&'a str>, &'static str, &'static str, Box<(dyn std::error::Error + Send + Sync + 'static)>>>> {parse::pattern::pattern} as nom::Parser<&str>>::Error>
for<'a> fn(&'a str) -> std::result::Result<(LocatedSpan<&'a str>, source::Pattern), nom::Err<GenericErrorTree<LocatedSpan<&'a str>, &'static str, &'static str, Box<(dyn std::error::Error + Send + Sync + 'static)>>>> {parse::pattern::term}
for<'a> fn(&'a str) -> std::result::Result<(LocatedSpan<&'a str>, String), nom::Err<GenericErrorTree<LocatedSpan<&'a str>, &'static str, &'static str, Box<(dyn std::error::Error + Send + Sync + 'static)>>>> {import_hierarchy}
for<'a> fn(&'a str) -> std::result::Result<(LocatedSpan<&'a str>, source::Type), nom::Err<GenericErrorTree<LocatedSpan<&'a str>, &'static str, &'static str, Box<(dyn std::error::Error + Send + Sync + 'static)>>>> {parse::tipe::term}
