Choice<(nom::Map<impl FnMut(LocatedSpan<&str>) -> std::result::Result<(LocatedSpan<&str>, (String, String)), nom::Err<nom::error::Error<LocatedSpan<&str>>>>, {closure@src/parse/expression.rs:84:18: 84:36}>, impl nom::Parser<LocatedSpan<&str>, Output = ast::Located<source::Expr_>, Error = nom::error::Error<LocatedSpan<&str>>>, for<'a> fn(LocatedSpan<&'a str>) -> std::result::Result<(LocatedSpan<&'a str>, ast::Located<source::Expr_>), nom::Err<nom::error::Error<LocatedSpan<&'a str>>>> {record_literal}, for<'a> fn(LocatedSpan<&'a str>) -> std::result::Result<(LocatedSpan<&'a str>, ast::Located<source::Expr_>), nom::Err<nom::error::Error<LocatedSpan<&'a str>>>> {list}, nom::Map<impl nom::Parser<LocatedSpan<&str>, Output = String, Error = nom::error::Error<LocatedSpan<&str>>>, fn(String) -> source::Expr_ {source::Expr_::String}>, nom::Map<impl nom::Parser<LocatedSpan<&str>, Output = u32, Error = nom::error::Error<LocatedSpan<&str>>>, fn(u32) -> source::Expr_ {source::Expr_::Nat}>, nom::Map<impl nom::Parser<LocatedSpan<&str>, Output = i32, Error = nom::error::Error<LocatedSpan<&str>>>, fn(i32) -> source::Expr_ {source::Expr_::Int}>, nom::Map<impl nom::Parser<_, Output = f32, Error = _>, fn(f32) -> source::Expr_ {source::Expr_::Float}>, impl nom::Parser<LocatedSpan<&str>, Output = ast::Located<source::Expr_>, Error = nom::error::Error<LocatedSpan<&str>>>, impl nom::Parser<LocatedSpan<&str>, Output = ast::Located<source::Expr_>, Error = nom::error::Error<LocatedSpan<&str>>>)>
