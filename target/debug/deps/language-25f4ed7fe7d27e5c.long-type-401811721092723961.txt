Choice<(nom::Map<for<'a> fn(LocatedSpan<&'a str>) -> std::result::Result<(LocatedSpan<&'a str>, String), nom::Err<nom::error::Error<LocatedSpan<&'a str>>>> {parse::type_identifier}, fn(String) -> Type_ {Type_::Identifier}>, nom::Map<for<'a> fn(LocatedSpan<&'a str>) -> std::result::Result<(LocatedSpan<&'a str>, String), nom::Err<nom::error::Error<LocatedSpan<&'a str>>>> {parse::value_identifier}, fn(String) -> Type_ {Type_::Identifier}>, for<'a> fn(LocatedSpan<&'a str>) -> std::result::Result<(LocatedSpan<&'a str>, ast::Located<Type_>), nom::Err<nom::error::Error<LocatedSpan<&'a str>>>> {tuple_type}, for<'a> fn(LocatedSpan<&'a str>) -> std::result::Result<(LocatedSpan<&'a str>, ast::Located<Type_>), nom::Err<nom::error::Error<LocatedSpan<&'a str>>>> {record_type}, for<'a> fn(LocatedSpan<&'a str>) -> std::result::Result<(LocatedSpan<&'a str>, ast::Located<Type_>), nom::Err<nom::error::Error<LocatedSpan<&'a str>>>> {unit_type}, impl nom::Parser<LocatedSpan<&str>, Output = ast::Located<Type_>, Error = nom::error::Error<LocatedSpan<&str>>>)>
