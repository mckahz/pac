syntax::Error: nom::error::ParseError<LocatedSpan<&str>>
for<'a> fn(LocatedSpan<&'a str>) -> std::result::Result<(LocatedSpan<&'a str>, ast::Located<Pattern_>), nom::Err<syntax::Error>> {parse::pattern::term}
for<'a> fn(LocatedSpan<&'a str>) -> std::result::Result<(LocatedSpan<&'a str>, String), nom::Err<syntax::Error>> {parse::type_identifier}
(for<'a> fn(LocatedSpan<&'a str>) -> std::result::Result<(LocatedSpan<&'a str>, String), nom::Err<syntax::Error>> {parse::type_identifier}, impl nom::Parser<LocatedSpan<&str>, Output = Vec<<for<'a> fn(LocatedSpan<&'a str>) -> std::result::Result<(LocatedSpan<&'a str>, ast::Located<Pattern_>), nom::Err<syntax::Error>> {parse::pattern::term} as nom::Parser<LocatedSpan<&str>>>::Output>, Error = <for<'a> fn(LocatedSpan<&'a str>) -> std::result::Result<(LocatedSpan<&'a str>, ast::Located<Pattern_>), nom::Err<syntax::Error>> {parse::pattern::term} as nom::Parser<LocatedSpan<&str>>>::Error>)
