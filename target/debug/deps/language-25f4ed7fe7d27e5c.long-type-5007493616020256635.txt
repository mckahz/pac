Choice<(nom::Map<for<'a> fn(LocatedSpan<&'a str>) -> std::result::Result<(LocatedSpan<&'a str>, String), nom::Err<nom::error::Error<LocatedSpan<&'a str>>>> {parse::type_identifier}, fn(String) -> source::Type {source::Type::Identifier}>, nom::Map<for<'a> fn(LocatedSpan<&'a str>) -> std::result::Result<(LocatedSpan<&'a str>, String), nom::Err<nom::error::Error<LocatedSpan<&'a str>>>> {parse::value_identifier}, fn(String) -> source::Type {source::Type::Identifier}>, for<'a> fn(&'a str) -> std::result::Result<(LocatedSpan<&'a str>, source::Type), nom::Err<nom::error::Error<LocatedSpan<&'a str>>>> {tuple_type}, for<'a> fn(&'a str) -> std::result::Result<(LocatedSpan<&'a str>, source::Type), nom::Err<nom::error::Error<LocatedSpan<&'a str>>>> {record_type}, for<'a> fn(&'a str) -> std::result::Result<(LocatedSpan<&'a str>, source::Type), nom::Err<nom::error::Error<LocatedSpan<&'a str>>>> {unit_type}, impl nom::Parser<&str, Output = _, Error = _>)>
