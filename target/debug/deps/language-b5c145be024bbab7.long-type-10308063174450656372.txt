Choice<(nom::Map<for<'a> fn(LocatedSpan<&'a str>) -> std::result::Result<(LocatedSpan<&'a str>, String), nom::Err<nom::error::Error<LocatedSpan<&'a str>>>> {parse::type_identifier}, fn(String) -> source::Type {source::Type::Identifier}>, nom::Map<for<'a> fn(LocatedSpan<&'a str>) -> std::result::Result<(LocatedSpan<&'a str>, String), nom::Err<nom::error::Error<LocatedSpan<&'a str>>>> {parse::value_identifier}, fn(String) -> source::Type {source::Type::Identifier}>, fn(String) -> std::result::Result<(LocatedSpan<&str>, source::Type), nom::Err<nom::error::Error<LocatedSpan<&str>>>> {tuple_type}, fn(String) -> std::result::Result<(LocatedSpan<&str>, source::Type), nom::Err<nom::error::Error<LocatedSpan<&str>>>> {record_type}, fn(String) -> std::result::Result<(LocatedSpan<&str>, source::Type), nom::Err<nom::error::Error<LocatedSpan<&str>>>> {unit_type}, impl nom::Parser<String, Output = _, Error = _>)>
